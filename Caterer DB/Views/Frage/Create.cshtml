@using Caterer_DB.Models
@model CreateFrageViewModel

<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Expires" CONTENT="-1">

@{
    ViewBag.Title = "Create";
}
<br />
<br />
<br />
<div class="row">
    <div id="CatererBearbeitenSeite" class="col-md-6 col-md-offset-3 text-center">
        <h1>Neue Frage hinzufügen</h1>
    </div>
</div>
<br />
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="col-md-8 col-md-offset-2">
            <div class="well well-lg">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                  <div class="row">
                    <div class="col-md-6">
                        <div class="form-group ">
                            @Html.LabelFor(model => model.KategorieName, htmlAttributes: new { @class = "control-label " })
                            @Html.DropDownList("KategorieId", Model.Kategorien, new { @class = "form-control prefilled ng-untouched ng-pristine ng-valid" })
                            @Html.ValidationMessageFor(model => model.KategorieName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group ">
                            @Html.LabelFor(model => model.IstMultiSelect, htmlAttributes: new { @class = "control-label " })
                            @Html.DropDownList("IstMultiSelect", Model.JaNein, new { @class = "form-control prefilled ng-untouched ng-pristine ng-valid" })
                            @Html.ValidationMessageFor(model => model.IstMultiSelect, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-8 col-md-offset-2">
            <div class="well well-lg">
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Bezeichnung, htmlAttributes: new { @class = "control-label col-md-0" })
                            @Html.EditorFor(model => model.Bezeichnung, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Bezeichnung, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 col-md-offset-4">
                        <input type="submit" value="Antwort hinzufügen" name="btnAddAnswer" class="btn btn-default btn-block" formnovalidate />
                    </div>
                </div>
                <br />
                @if (Model != null)
                {
                    for (int i = 0; i < Model.Antworten.Count; i++)
                    {
                        <div class="row">
                            <div class="form-group">
                                <div class="col-md-11">
                                    @Html.HiddenFor(Model => Model.Antworten[i].AntwortId)
                                    <label class="control-label col-md-0"> Antwort @(i + 1) </label>
                                    @Html.EditorFor(Model => Model.Antworten[i].Bezeichnung, new { htmlAttributes = new { @class = "form-control", id = @Model.Antworten[i].GetHashCode() } })
                                    @Html.ValidationMessageFor(model => model.Antworten[i].Bezeichnung, "", new { @class = "text-danger" })
                                 </div>
                                <div class="col-md-1 text-right">
                                    <ul class="list-unstyled list-inline " style="margin-top: 27px;">
                                        <li>
                                            <button id="LöschenButton"  name="btnDeleteAnswer" title="Antwort löschen" type="submit" class="btn btn-success" formnovalidate>
                                                <i class="glyphicon glyphicon-trash"></i>
                                            </button>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>

                    }
                }
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-2 col-md-offset-2">
            <button type="submit" id="btnSpeichern" name="btnCreateQuestion" value="Frage anlegen" class="btn btn-default btn-block">
                <i class="glyphicon glyphicon-ok"></i> Frage anlegen
            </button>
        </div>
        <div class="col-md-2">
            <a class="btn btn-default btn-block" id="btnZurück" href="@Url.Action("Index", "Frage")"><i class="glyphicon glyphicon-backward"></i> Zurück</a>
        </div>
    </div>






    @*<div class="row">
        <div class="col-md-5 col-md-offset-2">
            <ul class="list-unstyled list-inline " style="margin-left: 5px;">
                <li>
                    <button type="submit" id="btnSpeichern" name="btnCreateQuestion" value="Frage anlegen" class="btn btn-default">
                        <i class="glyphicon glyphicon-ok"></i> Frage anlegen
                    </button>
                </li>
                <li>
                    <a class="btn btn-default" id="btnZurück" href="@Url.Action("Index", "Frage")"><i class="glyphicon glyphicon-backward"></i> Zurück</a>
                </li>
            </ul>
        </div>
    </div>*@










}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}